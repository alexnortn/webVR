




Alex Norton
2016
-


Asset Management System

A-Frame has an asset management system that allows us to place all of our assets in one place and to preload and cache assets for better performance.

Games and rich 3D experiences traditionally preload many of their assets, such as models or textures, before rendering their scenes. This makes sure that assets aren't missing visually, and this is benifial for performance to ensure sences to don't try to fetch assets while rendering.

Assets are placed within <a-assets>, and <a-assets> is placed within <a-scene>
Assets include:

	+ <a-asset-item> = Miscellaneous assets such as 3D models and materials
 	+ <audio> - Sound files
 	+ <img> - Image textures
 	+ <video> - Video textures

The scene and all entities will block until all of these types of assets are fetched (or error out) before playing.


Example

We can define all of our assets in <a-assets> and point to those assets from our entities using selectors:

	<a-scene>
		<!-- Asset management system. -->
		<a-assets>
			<a-asset-item id="horse-obj" src="horse.obj"></a-asset-item>
			<a-asset-item id="horse-mtl" src="horse.mtl"></a-asset-item>
			<a-mixin id="giant" scale="5 5 5"></a-mixin>
			<audio id="neigh" src="neigh.mp3"></a-mixin>
			<img id="advertisement" src="ad.png">
			<video id="kentucky-derby" src="derby.mp4">
		</a-assets>
		<!-- Scene. -->
		<a-plane src="advertisement"></a-plane>
		<a-sound src="#neigh"></a-sound>
		<a-entity geometry="primitive: plane" material="src: #kentucky-derby"></a-entity>
		<a-entity mixin="giant" obj-model="obj: #horse-obj; mtl: #horse-mtl"></a-entity>
	</a-scene>

The scene and all of its entities will wait for all of the assets (up until the timeout) before initializing and rendering.


Cross-Origin Resource Sharing (CORS)

Since assets are fetched using XHRs, browser security requires assets to be served with cross-origin resource sharing (CORS) headers if it is hosted on a different domain. Otherwise, we'd have to host assets on the same origin as the scene.

For some options, all resouces hosted on GibHub Pages are served with CORS headers. We recommend GitHub Pages as a simple deployment platform. Or you could also upload assets using the A-Frame + Uploadcare Uploader, a service that serves files with CORS headers set.

Given that CORS headers are set, <a-assets> will automatically set crossorigin attributes on media elements (e.g., <audio>, <img>, <video>) if it detects the resource is on a different domain.


Preloading Audio and Video

Audio and video assets will only block the scene if autoplay is set or if preload="auto":

	<a-scene>
		<a-assets>
			<!-- These will not block. -->
			<audio src="blockus.mp3">
			<video src="loadofblocks.mp4">
			<!-- These will block. -->
			<audio src="blocky.mp3" autoplay>
			<video src="blockiscooking.mp4" preload="auto">
		</a-assets>
	</a-scene>


Setting a Timeout

We can set a timeout that when reached, the scene will begin rendering and entities will begin intializing regardless of whether all the assets have loaded. The default timeout is 3 seconds. To set a different timeout, we just pass in the number of milliseconds to the timeout attribute:

If some assets are taking a long time to load, we may want to set an appropriate timeout such the user isn't waiting all day in case their network is slow.

	<a-scene>
		<a-assets timeout="10000">
			<!-- You got until the count of 10 to load else the show will go on without you. -->
			<img src="bigimage.png">
		</a-asset>
	</a-scene>


Events

Since <a-assets> and <a-asset-item> are nodes in A-Frame, they will emit the loaded event when they say they have finished loading.

	+ loaded
	+ timeout


Load Progress on Individual Assets
	
	+ <a-asset-item> - loaded
	+ <img> - loaded

Audio and video assets are HTMLMediaElements. The browser triggers particular events on these elements; noted here for convenience:

	+ HTMLMediaElement - error, loadeddata, progress

A-Frame uses these progress events, comparing how much time was buffered with the duration of the asset, in order to detect when the asset has been loaded.

