



Alex Norton
2016
-


Build with Basic HTML

Let's first start building a scene using the basic primitive HTML building blocks.


Adding a Box

A Hello World scene is a scene with a box:

	<a-scene>
		<a-box color="#6173F4" width="4" height="10" depth="2"></a-box>
	</a-scene>

Juse like with regular HTML elements, we can configuge the element by setting HTML attributes. Here, we define color, width, height, depth of <a-box>. See the <a-box> documentation to see the available attributues.

For flat displays, the default control scheme lets us look around by click-dragging the mouse and move with the WASD keys. Upon entering VR, the default control scheme lets us look around with a VR headset and, if room scale is possible, literally walk around.


Transforming the Box

A-Frame uses a right-handed coordinate system

	+ Positive X-axis is "right"
	+ Positive Y-axis is "up"
	+ Positive Z-axis is pointing out of the screen towards us

The basic distance unit is defined in meters. When designing a scene for VR, it is important to consider the real world scale of the objects we create. A box with height="100" may be fine on our computer screens, but in VR it will look massive.

The basic rotational unit is defined in degrees. To determine the positive direction of rotation, use the right-hand rule. Point our thumbs down the direction of a positive axis, and the direction which our fingers curl around the positive direction of rotation.

To translate, rotater, and scale the box, we can configure the position, rotation, and scale components:

	<a-scene>
		<a-box color="#6173F4"
				width="4"
				height="10"
				depth="2"
				position="-10 2 -5"
				rotation="0 0 45"
				scale="2 0.5 3">
		</a-box>
    </a-scene>

The example above (assuming we are positioned on the origin looking down the negative Z-axis) will translate the box left/up/back, rotate the box to the right, stretches the box left-and-right and back-and-front, and shrinks the box up-and-down.


Applying a Texture to the Box

We can apply an image texture to the box with an image or video using the src attribute. To make sure the color does not mix with the texture, we set the back color to white:

	<a-scene>
		<a-box color="#FFF"
				width="4"
				height="10"
				depth="2"
				position="-10 2 -5"
				rotation="0 0 45"
				scale="2 0.5 3"
				scr="texture.png">
		</a-box>
	</a-scene>

It is desirable to cache the texture and block the scene from rendering until the texture is loaded. We can move the texture into the asset management system. We define it as an <img> tag, give it an ID, and point to it using a selector:
		
	<a-scene>
		<a-assets>
			<img id="texture" scr="texture.png">
		</a-assets>
		<a-box color="#FFF"
				width="4"
				height="10"
				depth="2"
				position="-10 2 -5"
				rotation="0 0 45"
				scale="2 0.5 3"
				scr="#texture"> <!-- Access texture using the ID ref -->
		</a-box>
	</a-scene>


Animating the Box

We can add an animation to the box using the built-in animation system. We can place an
<a-animation> element as a child of the entity to interpolate values. Let's have the box rotate indefinitely to add some motion in the scene:

	<a-scene>
		<a-assets>
			<img id="texture" scr="texture.png">
		</a-assets>
		<a-box color="#FFF"
				width="4"
				height="10"
				depth="2"
				position="-10 2 -5"
				rotation="0 0 45"
				scale="2 0.5 3"
				scr="#texture">
			<a-animation attribute="rotation" repeat="indefinite" to="0 360 0"></a-animation>
		</a-box>
	</a-scene>


Interacting with the Box

To interact with the box via clicking or gazing, we can use a cursor which we place as a child of the camera such that is is fixed to the screen. When we don't define a camera, the scene will inject a default camera, but in this case to add a cursor, we will need to define one.

Then we can tell the animation only to start when the cursor clicks the box event, using the animation's begin attribtue. The cursor will emit the click event on the box, and the animation will listen to it.

	<a-scene>
		<a-assets>
			<img id="texture" scr="texture.png">
		</a-assets>
		<a-box color="#FFF"
				width="4"
				height="10"
				depth="2"
				position="-10 2 -5"
				rotation="0 0 45"
				scale="2 0.5 3"
				scr="#texture">
			<!-- Animation will only play when the box is clicked -->
			<a-animation attribute="rotation" begin="click" repeat="indefinite" to="0 360 0"></a-animation>
		</a-box>
		<a-camera position="0 1.8 0">
			<a-cursor color="#2E3A87"></a-cursor>
		</a-camera>
	</a-scene>

As an aside, a more advanced method would be to write a component that listens to an event and does whatever we want it to do:

	AFRAME.registerComponent('scale-on-click'. { <!-- name of component -->
		schema: {
			to: {default: '2 2 2'} <!-- default values -->
		},
		init: function() {
			var data = this.data;
			this.el.addEventListener('click', function() { <!-- type of listener -->
				this.setAttribute('scale', data.to); <!-- pick attribute to set -->
			});
		}
	});

And we can attatch the componenet to the <a-box> primitive:

	<a-box color="#FFF"
			width="4"
			height="10"
			depth="2"
			position="-10 2 -5"
			rotation="0 0 45"
			scale="2 0.5 3"
			scr="#texture.png"
			scale-on-click="t0: 3 3 3"> <!-- Added custom component as defined above -->
		<a-animation attribute="rotation" begin="click" repeat="indefinite" to="0 360 0"></a-animation>	
	</a-box>


Lighting the Box

We can change how the scene is lit with <a-light>. By default, the scene will inject an ambient light and a directional light (which acts like the sun). Once we add lights of our own, this default lighting setup is removed:

	<a-scene>
		<a-assets>
			<img id="texture" scr="texture.png">
		</a-assets>
		<a-box color="#FFF"
				width="4"
				height="10"
				depth="2"
				position="-10 2 -5"
				rotation="0 0 45"
				scale="2 0.5 3"
				scr="#texture">
			<a-animation attribute="rotation" begin="click" repeat="indefinite" to="0 360 0"></a-animation>
		</a-box>
		<!-- New Lights. Note the super cool "Look-At" attribute -->
		<a-light type="spot" color="#333" position="-20 0 0" look-at="a-box"></a-light>
		<a-light type="point" color="#AAA" position="-0 5 0"></a-light>
		<a-camera position="0 1.8 0">
			<a-cursor color="#2E3A87"></a-cursor>
		</a-camera>
	</a-scene>


Adding a Background to the Scene

Lastly, we can add a background to the scene using <a-sky>. The background can be a color, a 360 degree image, or even a 360 degree video. This is created by creating a sphere that wraps the scene:

	<a-scene>
		<a-assets>
			<img id="texture" scr="texture.png">
		</a-assets>
		<a-box color="#FFF"
				width="4"
				height="10"
				depth="2"
				position="-10 2 -5"
				rotation="0 0 45"
				scale="2 0.5 3"
				scr="#texture">
			<a-animation attribute="rotation" begin="click" repeat="indefinite" to="0 360 0"></a-animation>
		</a-box>
		<a-light type="spot" color="#333" position="-20 0 0" look-at="a-box"></a-light>
		<a-light type="point" color="#AAA" position="-0 5 0"></a-light>
		<!-- Background -->
		<a-sky color="#73F7DD"></a-sky>
		<a-camera position="0 1.8 0">
			<a-cursor color="#2E3A87"></a-cursor>
		</a-camera>
	</a-scene>

And this is a very basic scene that places static objects in a 3D space using HTML. A good VR experience requires rich interaction and dynamic behavior. With the help of using and writing A-Frame components, we can build a more advanced scene.
